from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from config.data import RuTexts
from config.data import SUPPORT_CHAT
from .states import SupportState


router = Router(name=__name__)


@router.message(F.text == RuTexts.support)
async def support_message_handler(message: Message, state: FSMContext):
    await state.set_state(SupportState.question)
    await message.answer(RuTexts.SUPPORT_MESSAGE)


@router.message(SupportState.question, F.text == "–û–ü–ï–†–ê–¢–û–†")
async def operator_message_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à(-–∏) –≤–æ–ø—Ä–æ—Å(-—ã) –æ–ø–µ—Ä–∞—Ç–æ—Ä—É...\n–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    username = message.from_user.username
    text = f"<b>–í–æ–ø—Ä–æ—Å –æ—Ç {username}</b> [https://t.me/{username}]\n{data['question']}"
    await message.bot.send_message(SUPPORT_CHAT['id'], text=text)  # –°–î–ï–õ–ê–¢–¨ –ö–ù–û–ü–ö–£ HIDE –ö–ê–ö –£ –õ–ï–ì–ò–û–ù –ë–û–¢–ê
    await state.clear()


@router.message(SupportState.question)
async def question_message_handler(message: Message, state: FSMContext):
    question = message.text
    try:
        old_question = (await state.get_data())['question'] + '\n'
    except: # first question
        old_question = ''
    await state.update_data(question=f"{old_question}\n`{question}`")
    keywords = RuTexts.support_keywords
    answer_found = False
    for key in keywords.keys():
        if key in question:
            await message.answer(text=keywords[key])
            answer_found = True
            break
    if not answer_found:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏üòï\n–ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö, –∏ –∑–∞—Ç–µ–º –ø—Ä–æ–ø–∏—à–∏—Ç–µ \"–û–ü–ï–†–ê–¢–û–†\" –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
